from fastapi import APIRouter, HTTPException
from pydantic import BaseModel
from utils import send_notification
import requests
import os

router = APIRouter(prefix="/broadcast", tags=["broadcast"])

class BroadcastRequest(BaseModel):
    to: str  # ssk, iko, foreman
    subject: str
    body: str
    is_html: bool = False
    access_token: str

@router.post("/notification")
async def broadcast_notification(request: BroadcastRequest):
    try:
        print(f"üîß [BROADCAST] –ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è —Ä–æ–ª–∏: {request.to}")
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
        access_token = request.access_token
        print(f"üîß [BROADCAST] –¢–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω: {access_token[:10]}...")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —Ä–æ–ª–∏
        role_mapping = {
            "ssk": "ssk",
            "iko": "iko", 
            "foreman": "foreman",
            "all": None  # –¥–ª—è –≤—Å–µ—Ö —Ä–æ–ª–µ–π
        }
        
        role = role_mapping.get(request.to)
        if role is None and request.to != "all":
            print(f"‚ùå [BROADCAST] –ù–µ–≤–µ—Ä–Ω–∞—è —Ä–æ–ª—å: {request.to}")
            raise HTTPException(status_code=400, detail="–ù–µ–≤–µ—Ä–Ω–∞—è —Ä–æ–ª—å. –î–æ—Å—Ç—É–ø–Ω—ã–µ: ssk, iko, foreman, all")
        
        print(f"üîß [BROADCAST] –†–æ–ª—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞: {role}")
        
        # –î–ª—è —Ä–æ–ª–∏ "all" –Ω–µ –ø–µ—Ä–µ–¥–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä role
        params = {"role": role} if role else {}
        print(f"üîß [BROADCAST] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ API —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏: {params}")
        
        resp = requests.get(
            'https://building-api.itc-hub.ru/api/v1/users',
            headers={
                'Authorization': f'Bearer {access_token}',
                'Content-Type': 'application/json'
            },
            params=params,
            timeout=15
        )
        
        print(f"üîß [BROADCAST] –û—Ç–≤–µ—Ç API: —Å—Ç–∞—Ç—É—Å {resp.status_code}")
        
        if resp.status_code != 200:
            print(f"‚ùå [BROADCAST] –û—à–∏–±–∫–∞ API: {resp.status_code}, —Ç–µ–∫—Å—Ç: {resp.text}")
            raise HTTPException(status_code=502, detail=f"–û—à–∏–±–∫–∞ API: {resp.status_code}")
        
        data = resp.json()
        users = data.get("items", [])
        print(f"üîß [BROADCAST] –ü–æ–ª—É—á–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users)}")
        
        if not users:
            print("‚ÑπÔ∏è [BROADCAST] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å —Ç–∞–∫–æ–π —Ä–æ–ª—å—é –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return {"status": "success", "message": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å —Ç–∞–∫–æ–π —Ä–æ–ª—å—é –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", "sent_count": 0}
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
        sent_count = 0
        print(f"üîß [BROADCAST] –ù–∞—á–∏–Ω–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π...")
        
        for i, user in enumerate(users):
            email = user.get("email")
            user_id = user.get("id")
            print(f"üîß [BROADCAST] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {i+1}: email={email}, id={user_id}")
            
            if email and user_id:
                print(f"üîß [BROADCAST] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–∞ {email}")
                success = send_notification([email], request.subject, request.body, str(user_id), request.is_html)
                if success:
                    sent_count += 1
                    print(f"‚úÖ [BROADCAST] –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ {email}")
                else:
                    print(f"‚ùå [BROADCAST] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ {email}")
            else:
                print(f"‚ö†Ô∏è [BROADCAST] –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {i+1}: –Ω–µ—Ç email –∏–ª–∏ id")
        
        print(f"üîß [BROADCAST] –ó–∞–≤–µ—Ä—à–µ–Ω–æ. –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent_count}/{len(users)}")
        
        return {
            "status": "success", 
            "message": f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {sent_count} –∏–∑ {len(users)} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π",
            "sent_count": sent_count,
            "total_users": len(users)
        }
        
    except requests.exceptions.RequestException as e:
        raise HTTPException(status_code=502, detail=f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API: {str(e)}")
    except Exception as e:
        import traceback
        error_msg = f"–û—à–∏–±–∫–∞: {str(e)}. Traceback: {traceback.format_exc()}"
        raise HTTPException(status_code=500, detail=error_msg)
